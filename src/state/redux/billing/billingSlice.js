import { PayloadAction, createAsyncThunk, createSlice } from '@reduxjs/toolkit';

import { billingDetailsAPI, billingPortalAPI, cancellationSubscriptionAPI } from './billingAPI';

const initialState = {
  userBillingProfile: null,
  billingPortalLoader: false,
};

export const userBillingInfo = createAsyncThunk('userBilling/Info', async ({ user, organizationId }, { dispatch }) => {
  await billingDetailsAPI({ user, organizationId, dispatch });
});
export const billingPortal = createAsyncThunk('userBillingPortal/Info', async ({ user, customerId }, { dispatch }) => {
  await billingPortalAPI({ user, customerId, dispatch });
});

export const cancellationSubscription = createAsyncThunk(
  'billing/cancel',
  async ({ user, customerId }, { dispatch }) => {
    await cancellationSubscriptionAPI({ user, customerId, dispatch });
  }
);

export const billingSlice = createSlice({
  name: 'userBillingDetails',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    billingDetails: (state, action) => {
      state.userBillingProfile = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(billingPortal.pending, (state) => {
        state.billingPortalLoader = true;
      })
      .addCase(billingPortal.fulfilled, (state, { payload }) => {
        state.billingPortalLoader = false;
      });
  },
});

export const { billingDetails } = billingSlice.actions;

export default billingSlice.reducer;
