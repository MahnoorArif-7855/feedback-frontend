import { USER_LAST_ACTIVITY_SUMMARY } from '@/common/utils/constant';
import { exploreDummyData, sentimentsDummyData } from '@/common/utils/hardcode';
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

import { sendLastActivitySlice } from '../userProfile/userProfileSlice';
import {
  AIChatAPI,
  UserSearchAPI,
  deleteFeedback,
  fetchExploreDataAPI,
  getSummaryAPIModal,
  insertFeedback,
  searchAPIModal,
  searchDetailsAPI,
} from './searchAPI';

const initialState = {
  searchInfo: [],
  searchFeedback: null,
  OrganizationSearch: [],
  searchLoader: false,
  exploreLoader: false,
  analysisLoader: false,
  chatResponse: null,
  exploreDummyData: {
    overAll: exploreDummyData,
    sentiments: sentimentsDummyData,
  },
  summaryResponse: '',
  exploreResponse: {
    overall: null,
    overallLoading: false,
    sentiments: null,
    filter: null,
  },
};

export const searchAISlice = createAsyncThunk(
  'search/Info',
  async ({ user, searchValue, myCategoryQry, organizationId, setLoader }, { dispatch }) => {
    await searchDetailsAPI({
      user,
      searchValue,
      myCategoryQry,
      setLoader,
      organizationId,
      dispatch,
    });
  }
);

export const searchModalSlice = createAsyncThunk('search/Info', async ({ mongoId }, { dispatch }) => {
  await searchAPIModal({ mongoId, dispatch });
});
export const getSummarySlice = createAsyncThunk(
  'search/Info',
  async ({ user, organizationId, mongoId }, { dispatch }) => {
    await getSummaryAPIModal({ user, organizationId, mongoId, dispatch });
  }
);
export const UserSearchSlice = createAsyncThunk('search/organizationId', async ({ organizationId }, { dispatch }) => {
  await UserSearchAPI({ organizationId, dispatch });
});

export const FeedbackSubmitSlice = createAsyncThunk('feedback/add_feedback', async (feedbackData, { dispatch }) => {
  await insertFeedback(feedbackData);
});
export const FeedbackDeleteSlice = createAsyncThunk('feedback/delete_feedback', async (feedbackData) => {
  await deleteFeedback(feedbackData);
});

export const AIChatSlice = createAsyncThunk(
  'chat/AI',
  async ({ q, organizationId, user, userId, userName }, { dispatch }) => {
    await AIChatAPI({ q, organizationId, user, userId, userName, dispatch });
  }
);
export const exploreSlice = createAsyncThunk(
  'chat/AI',
  async (
    {
      organizationId,
      user,
      analyseType,
      pageType,
      days,
      cacheData,
      feedbackSource,
      categories,
      searchFeedbackTags,
      dateFilter,
    },
    { dispatch, rejectWithValue }
  ) => {
    if (organizationId) {
      const responseData = await fetchExploreDataAPI({
        organizationId,
        user,
        analyseType,
        days,
        cacheData,
        feedbackSource,
        categories,
        searchFeedbackTags,
        dateFilter,
      });
      if (responseData.error) {
        rejectWithValue(responseData.error);
        dispatch(exploreSliceSuccess(responseData));
        dispatch(sendLastActivitySlice({ lastActivity: USER_LAST_ACTIVITY_SUMMARY.DASHBOARD, user }));
        return false;
      } else {
        dispatch(exploreSliceSuccess(responseData));
        dispatch(sendLastActivitySlice({ lastActivity: USER_LAST_ACTIVITY_SUMMARY.DASHBOARD, user }));
        return true;
      }
    } else {
      rejectWithValue('Please provide organization id');
      return false;
    }
  }
);

export const searchSlice = createSlice({
  name: 'search',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    searchData: (state, action) => {
      state.searchInfo = action.payload;
    },
    searchFeedbackInfo: (state, { payload }) => {
      state.searchFeedback = payload;
    },
    userSearchInfo: (state, { payload }) => {
      state.OrganizationSearch = payload;
    },
    chatAIResponse: (state, { payload }) => {
      state.chatResponse = payload;
    },
    feedbackSummary: (state, { payload }) => {
      state.summaryResponse = payload;
    },
    exploreSliceSuccess: (state, { payload }) => {
      const { filter, sentiments, error, category, analyzed_data } = payload;

      state.exploreResponse[category] = analyzed_data;
      state.exploreResponse.sentiments = sentiments;
      state.exploreResponse.filter = filter;
      if (error) {
        state.exploreLoader = false;
        state.exploreResponse['overall'] = null;
        state.exploreResponse.sentiments = null;
        state.exploreResponse.filter = null;
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(searchAISlice.pending, (state) => {
        state.searchLoader = true;
      })
      .addCase(searchAISlice.fulfilled, (state, { payload }) => {
        state.searchLoader = false;
      })
      .addCase(exploreSlice.pending, (state) => {
        state.exploreLoader = true;
      })
      .addCase(exploreSlice.fulfilled, (state) => {
        state.exploreLoader = false;
      })
      .addCase(exploreSlice.rejected, (state) => {
        state.exploreLoader = false;
      });
  },
});

export const { searchData, searchFeedbackInfo, chatAIResponse, userSearchInfo, exploreSliceSuccess, feedbackSummary } =
  searchSlice.actions;

export default searchSlice.reducer;
